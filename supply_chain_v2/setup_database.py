#!/usr/bin/env python3
"""Script pour configurer et mettre √† jour la base de donn√©es Supply Chain"""

import os
import sys
from dotenv import load_dotenv
from sqlalchemy import create_engine, text

# Charger les variables d'environnement
load_dotenv()

def get_db_connection():
    """Cr√©er une connexion √† la base de donn√©es"""
    db_host = os.getenv('DB_HOST', 'localhost')
    db_port = os.getenv('DB_PORT', '5432')
    db_name = os.getenv('DB_NAME', 'supply_chain_db')
    db_user = os.getenv('DB_USER', 'postgres')
    db_password = os.getenv('DB_PASSWORD', '')
    
    db_url = f'postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}'
    
    try:
        engine = create_engine(db_url)
        return engine
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return None

def execute_sql_file(engine, file_path):
    """Ex√©cuter un fichier SQL"""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            sql_content = file.read()
        
        with engine.connect() as conn:
            # Diviser le contenu en statements individuels
            statements = [stmt.strip() for stmt in sql_content.split(';') if stmt.strip()]
            
            for statement in statements:
                if statement:
                    try:
                        conn.execute(text(statement))
                        conn.commit()
                    except Exception as e:
                        print(f"‚ö†Ô∏è  Avertissement lors de l'ex√©cution: {e}")
                        continue
        
        print(f"‚úÖ Fichier {file_path} ex√©cut√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution de {file_path}: {e}")
        return False

def check_tables(engine):
    """V√©rifier quelles tables existent"""
    try:
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            
            tables = [row[0] for row in result]
            print(f"üìã Tables existantes: {', '.join(tables)}")
            return tables
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des tables: {e}")
        return []

def add_sample_data(engine):
    """Ajouter des donn√©es d'exemple"""
    sample_data = [
        # Entrep√¥ts
        """INSERT INTO warehouses (warehouse_name, location, capacity_m3) 
           VALUES ('Entrep√¥t Paris', 'Paris, France', 1000.0),
                  ('Entrep√¥t Lyon', 'Lyon, France', 800.0),
                  ('Entrep√¥t Marseille', 'Marseille, France', 1200.0)
           ON CONFLICT DO NOTHING""",
        
        # Produits
        """INSERT INTO skus (sku_code, product_name, category, unit_cost, description)
           VALUES ('SKU001', 'Ordinateur Portable', '√âlectronique', 800.00, 'Ordinateur portable 15 pouces'),
                  ('SKU002', 'Souris Sans Fil', '√âlectronique', 25.00, 'Souris optique sans fil'),
                  ('SKU003', 'Clavier M√©canique', '√âlectronique', 120.00, 'Clavier m√©canique RGB'),
                  ('SKU004', '√âcran 24 pouces', '√âlectronique', 200.00, 'Moniteur LED 24 pouces Full HD')
           ON CONFLICT DO NOTHING""",
        
        # Fournisseurs
        """INSERT INTO suppliers (supplier_name, contact_person, email, phone, address, country)
           VALUES ('TechSupply France', 'Jean Dupont', 'contact@techsupply.fr', '01.23.45.67.89', '123 Rue de la Tech, Paris', 'France'),
                  ('ElectroWorld', 'Marie Martin', 'info@electroworld.com', '04.56.78.90.12', '456 Avenue des Composants, Lyon', 'France')
           ON CONFLICT DO NOTHING""",
        
        # Clients
        """INSERT INTO customers (customer_name, contact_person, email, phone, address, city, country)
           VALUES ('Entreprise ABC', 'Pierre Durand', 'pierre@abc-corp.fr', '01.11.22.33.44', '789 Boulevard du Commerce', 'Paris', 'France'),
                  ('Soci√©t√© XYZ', 'Sophie Leblanc', 'sophie@xyz-company.fr', '04.55.66.77.88', '321 Rue de l\'Innovation', 'Lyon', 'France'),
                  ('StartUp Tech', 'Marc Rousseau', 'marc@startup-tech.fr', '02.99.88.77.66', '654 Avenue du Num√©rique', 'Nantes', 'France')
           ON CONFLICT DO NOTHING""",
        
        # Commandes
        """INSERT INTO orders (order_number, customer_id, order_date, required_date, status, priority, total_value)
           VALUES ('ORD-2024-001', '1', CURRENT_DATE - INTERVAL '5 days', CURRENT_DATE + INTERVAL '2 days', 'PROCESSING', 'HIGH', 1500.00),
                  ('ORD-2024-002', '2', CURRENT_DATE - INTERVAL '3 days', CURRENT_DATE + INTERVAL '5 days', 'PENDING', 'NORMAL', 800.00),
                  ('ORD-2024-003', '3', CURRENT_DATE - INTERVAL '1 day', CURRENT_DATE + INTERVAL '7 days', 'PENDING', 'LOW', 345.00)
           ON CONFLICT DO NOTHING""",
        
        # Stock initial
        """INSERT INTO inventory (warehouse_id, sku_id, quantity_available, safety_stock, reorder_point)
           VALUES (1, 1, 50, 10, 20),
                  (1, 2, 200, 50, 100),
                  (1, 3, 75, 15, 30),
                  (1, 4, 30, 5, 15),
                  (2, 1, 30, 10, 20),
                  (2, 2, 150, 50, 100),
                  (3, 3, 40, 15, 30),
                  (3, 4, 25, 5, 15)
           ON CONFLICT DO NOTHING"""
    ]
    
    try:
        with engine.connect() as conn:
            for query in sample_data:
                try:
                    conn.execute(text(query))
                    conn.commit()
                except Exception as e:
                    print(f"‚ö†Ô∏è  Avertissement donn√©es d'exemple: {e}")
                    continue
        
        print("‚úÖ Donn√©es d'exemple ajout√©es")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout des donn√©es d'exemple: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöö Configuration de la base de donn√©es Supply Chain...")
    
    # Connexion √† la base de donn√©es
    engine = get_db_connection()
    if not engine:
        print("‚ùå Impossible de se connecter √† la base de donn√©es")
        sys.exit(1)
    
    print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
    
    # V√©rifier les tables existantes
    existing_tables = check_tables(engine)
    
    # Ex√©cuter le script de mise √† jour
    if os.path.exists('update_schema.sql'):
        print("üìù Ex√©cution du script de mise √† jour...")
        execute_sql_file(engine, 'update_schema.sql')
    
    # V√©rifier √† nouveau les tables
    print("\nüìã V√©rification apr√®s mise √† jour:")
    updated_tables = check_tables(engine)
    
    # Ajouter des donn√©es d'exemple si les tables sont vides
    print("\nüìä Ajout de donn√©es d'exemple...")
    add_sample_data(engine)
    
    print("\n‚úÖ Configuration termin√©e!")
    print("üåê Vous pouvez maintenant d√©marrer l'application avec: ./start.sh")

if __name__ == "__main__":
    main()

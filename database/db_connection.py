import os
import psycopg2
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
import pandas as pd

load_dotenv()

class DatabaseConnection:
    def __init__(self):
        self.db_url = os.getenv('DB_URL')
        self.engine = None
        self.connection = None
        
    def connect(self):
        """√âtablit la connexion √† la base de donn√©es"""
        try:
            self.engine = create_engine(self.db_url)
            self.connection = self.engine.connect()
            print("‚úÖ Connexion √† la base de donn√©es √©tablie")
            return True
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    def execute_query(self, query, params=None):
        """Ex√©cute une requ√™te SQL"""
        try:
            from sqlalchemy import text
            if params:
                result = self.connection.execute(text(query), params)
            else:
                result = self.connection.execute(text(query))
            self.connection.commit()
            return result
        except Exception as e:
            print(f"‚ùå Erreur d'ex√©cution: {e}")
            return None
    
    def query(self, query, params=None):
        """Alias pour execute_query qui retourne les r√©sultats"""
        try:
            from sqlalchemy import text
            if params:
                result = self.connection.execute(text(query), params)
            else:
                result = self.connection.execute(text(query))
            return result.fetchall()
        except Exception as e:
            print(f"‚ùå Erreur de requ√™te: {e}")
            return []
    
    def read_to_dataframe(self, query, params=None):
        """Lit les donn√©es dans un DataFrame pandas"""
        try:
            from sqlalchemy import text
            if params:
                df = pd.read_sql(text(query), self.engine, params=params)
            else:
                df = pd.read_sql(text(query), self.engine)
            print(f"‚úÖ DataFrame cr√©√© avec {len(df)} lignes")
            return df
        except Exception as e:
            print(f"‚ùå Erreur de lecture: {e}")
            return pd.DataFrame()
    
    def write_dataframe(self, df, table_name, if_exists='append'):
        """√âcrit un DataFrame dans une table"""
        try:
            df.to_sql(table_name, self.engine, if_exists=if_exists, index=False)
            print(f"‚úÖ Donn√©es ins√©r√©es dans {table_name}")
            return True
        except Exception as e:
            print(f"‚ùå Erreur d'insertion: {e}")
            return False
    
    def close(self):
        """Ferme la connexion"""
        if self.connection:
            self.connection.close()
        if self.engine:
            self.engine.dispose()
        print("üîí Connexion ferm√©e")

# Instance globale
db = DatabaseConnection()

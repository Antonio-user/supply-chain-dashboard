#!/usr/bin/env python3
"""
Script d'import pour PostgreSQL
Cr√©e la base de donn√©es, le sch√©ma et importe les donn√©es de d√©monstration
"""

import os
import sys
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from dotenv import load_dotenv
import subprocess

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.db_connection import DatabaseConnection
from etl.data_generator import DataGenerator

class PostgreSQLImporter:
    def __init__(self):
        """Initialise l'importeur PostgreSQL"""
        load_dotenv()
        
        self.db_config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': os.getenv('DB_PORT', '5432'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', ''),
            'database': os.getenv('DB_NAME', 'supply_chain_db')
        }
        
        self.schema_file = os.path.join(os.path.dirname(__file__), 'schema.sql')
        
    def check_postgresql_service(self):
        """V√©rifie si PostgreSQL est en cours d'ex√©cution"""
        print("üîç V√©rification du service PostgreSQL...")
        
        try:
            # Tenter de se connecter √† PostgreSQL
            conn = psycopg2.connect(
                host=self.db_config['host'],
                port=self.db_config['port'],
                user=self.db_config['user'],
                password=self.db_config['password'],
                database='postgres'  # Base par d√©faut
            )
            conn.close()
            print("‚úÖ PostgreSQL est accessible")
            return True
        except psycopg2.OperationalError as e:
            print(f"‚ùå Erreur de connexion PostgreSQL: {e}")
            print("\nüìã Instructions pour d√©marrer PostgreSQL:")
            print("   ‚Ä¢ Ubuntu/Debian: sudo systemctl start postgresql")
            print("   ‚Ä¢ CentOS/RHEL: sudo systemctl start postgresql")
            print("   ‚Ä¢ macOS: brew services start postgresql")
            print("   ‚Ä¢ Windows: net start postgresql-x64-xx")
            return False
    
    def create_database(self):
        """Cr√©e la base de donn√©es si elle n'existe pas"""
        print(f"üóÑÔ∏è Cr√©ation de la base de donn√©es '{self.db_config['database']}'...")
        
        try:
            # Connexion √† la base postgres par d√©faut
            conn = psycopg2.connect(
                host=self.db_config['host'],
                port=self.db_config['port'],
                user=self.db_config['user'],
                password=self.db_config['password'],
                database='postgres'
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            cursor = conn.cursor()
            
            # V√©rifier si la base existe
            cursor.execute(
                "SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s",
                (self.db_config['database'],)
            )
            
            if cursor.fetchone():
                print(f"‚úÖ La base de donn√©es '{self.db_config['database']}' existe d√©j√†")
            else:
                # Cr√©er la base de donn√©es
                cursor.execute(f"CREATE DATABASE {self.db_config['database']}")
                print(f"‚úÖ Base de donn√©es '{self.db_config['database']}' cr√©√©e avec succ√®s")
            
            cursor.close()
            conn.close()
            return True
            
        except psycopg2.Error as e:
            print(f"‚ùå Erreur lors de la cr√©ation de la base: {e}")
            return False
    
    def import_schema(self):
        """Importe le sch√©ma SQL"""
        print("üìã Import du sch√©ma SQL...")
        
        if not os.path.exists(self.schema_file):
            print(f"‚ùå Fichier schema.sql introuvable: {self.schema_file}")
            return False
        
        try:
            # Connexion √† la base de donn√©es cible
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            # Lire et ex√©cuter le fichier SQL
            with open(self.schema_file, 'r', encoding='utf-8') as f:
                schema_sql = f.read()
            
            # Ex√©cuter le sch√©ma par blocs
            sql_commands = schema_sql.split(';')
            
            for command in sql_commands:
                command = command.strip()
                if command:
                    try:
                        cursor.execute(command)
                    except psycopg2.Error as e:
                        # Ignorer les erreurs de tables/index d√©j√† existants
                        if "already exists" not in str(e):
                            print(f"‚ö†Ô∏è Avertissement SQL: {e}")
            
            conn.commit()
            cursor.close()
            conn.close()
            
            print("‚úÖ Sch√©ma import√© avec succ√®s")
            return True
            
        except psycopg2.Error as e:
            print(f"‚ùå Erreur lors de l'import du sch√©ma: {e}")
            return False
    
    def generate_demo_data(self):
        """G√©n√®re et importe les donn√©es de d√©monstration"""
        print("üìä G√©n√©ration des donn√©es de d√©monstration...")
        
        try:
            # Utiliser le g√©n√©rateur de donn√©es existant
            generator = DataGenerator()
            
            if generator.connect_db():
                print("‚úÖ Connexion √† la base √©tablie")
                
                # G√©n√©rer les donn√©es
                generator.generate_all_data()
                print("‚úÖ Donn√©es de d√©monstration g√©n√©r√©es avec succ√®s")
                
                generator.close_connection()
                return True
            else:
                print("‚ùå Impossible de se connecter √† la base pour g√©n√©rer les donn√©es")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration des donn√©es: {e}")
            return False
    
    def verify_installation(self):
        """V√©rifie que l'installation s'est bien d√©roul√©e"""
        print("üîç V√©rification de l'installation...")
        
        try:
            db = DatabaseConnection()
            if db.connect():
                # V√©rifier quelques tables cl√©s
                tables_to_check = ['warehouses', 'skus', 'inventory', 'orders']
                
                for table in tables_to_check:
                    result = db.query(f"SELECT COUNT(*) FROM {table}")
                    count = result[0][0] if result else 0
                    print(f"  üìã Table {table}: {count} enregistrements")
                
                db.close()
                print("‚úÖ Installation v√©rifi√©e avec succ√®s")
                return True
            else:
                print("‚ùå Impossible de v√©rifier l'installation")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification: {e}")
            return False
    
    def run_import(self):
        """Ex√©cute l'import complet"""
        print("üöÄ D√©marrage de l'import PostgreSQL")
        print("=" * 50)
        
        steps = [
            ("V√©rification PostgreSQL", self.check_postgresql_service),
            ("Cr√©ation base de donn√©es", self.create_database),
            ("Import du sch√©ma", self.import_schema),
            ("G√©n√©ration donn√©es d√©mo", self.generate_demo_data),
            ("V√©rification installation", self.verify_installation)
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìå {step_name}...")
            if not step_func():
                print(f"‚ùå √âchec √† l'√©tape: {step_name}")
                return False
        
        print("\n" + "=" * 50)
        print("üéâ Import PostgreSQL termin√© avec succ√®s!")
        print("\nüìã Prochaines √©tapes:")
        print("   1. V√©rifiez votre fichier .env avec les bonnes informations de connexion")
        print("   2. Lancez le dashboard: python dashboard/app.py")
        print("   3. Ou lancez la d√©mo: python demo_dashboard.py")
        
        return True

def main():
    """Fonction principale"""
    print("üóÑÔ∏è Script d'import PostgreSQL pour Supply Chain Dashboard")
    print("=" * 60)
    
    # V√©rifier si le fichier .env existe
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è Fichier .env non trouv√©")
        print("üìã Copiez .env.example vers .env et configurez vos param√®tres:")
        print("   cp .env.example .env")
        print("   # Puis √©ditez .env avec vos param√®tres PostgreSQL")
        return
    
    importer = PostgreSQLImporter()
    
    try:
        success = importer.run_import()
        if success:
            print("\nüöÄ Vous pouvez maintenant lancer l'application!")
        else:
            print("\n‚ùå L'import a √©chou√©. V√©rifiez les messages d'erreur ci-dessus.")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Import interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")

if __name__ == "__main__":
    main()
